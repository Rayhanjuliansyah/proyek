// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  isActive Boolean @default(true)

  role        userRole      @default(user)
  Ustad       Ustad[]
  Booking     Booking[]
  UserProfile UserProfile[]

  @@map("user")
}

enum userRole {
  admin
  ustad
  user
}

model UserProfile {
  id        Int       @id @default(autoincrement())
  userId    Int
  firstName String
  lastName  String?
  phone     String
  imageUrl  String?
  isActive  Boolean   @default(true)
  Booking   Booking[]

  user User @relation(fields: [userId], references: [id])

  @@map("user_profile")
}

model Ustad {
  id           Int      @id @default(autoincrement())
  name         String
  expertise    String[]
  description  String
  hourlyRate   Float
  availability Boolean
  userId       Int

  user    User      @relation(fields: [userId], references: [id])
  Booking Booking[]

  @@map("ustad")
}

model Booking {
  id          Int           @id @default(autoincrement())
  userId      Int
  ustadId     Int
  bookingDate DateTime      @default(now())
  eventDate   DateTime?
  duration    String
  location    String
  price       Float
  status      bookingStatus @default(pending)

  user          User         @relation(fields: [userId], references: [id])
  Ustad         Ustad        @relation(fields: [ustadId], references: [id])
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId Int?

  @@map("booking")
}

enum bookingStatus {
  pending
  accepted
  rejected
  completed
}
